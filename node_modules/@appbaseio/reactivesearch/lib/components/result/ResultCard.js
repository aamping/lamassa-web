'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRedux = require('react-redux');

var _actions = require('@appbaseio/reactivecore/lib/actions');

var _helper = require('@appbaseio/reactivecore/lib/utils/helper');

var _types = require('@appbaseio/reactivecore/lib/utils/types');

var _types2 = _interopRequireDefault(_types);

var _PoweredBy = require('./addons/PoweredBy');

var _PoweredBy2 = _interopRequireDefault(_PoweredBy);

var _Title = require('../../styles/Title');

var _Title2 = _interopRequireDefault(_Title);

var _Button = require('../../styles/Button');

var _Button2 = _interopRequireDefault(_Button);

var _Card = require('../../styles/Card');

var _Card2 = _interopRequireDefault(_Card);

var _Flex = require('../../styles/Flex');

var _Flex2 = _interopRequireDefault(_Flex);

var _results = require('../../styles/results');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ResultCard = function (_Component) {
	_inherits(ResultCard, _Component);

	function ResultCard(props) {
		_classCallCheck(this, ResultCard);

		var _this = _possibleConstructorReturn(this, _Component.call(this, props));

		_initialiseProps.call(_this);

		_this.state = {
			from: 0,
			isLoading: false,
			totalPages: 0,
			currentPage: 0
		};
		_this.internalComponent = props.componentId + '__internal';
		return _this;
	}

	ResultCard.prototype.componentDidMount = function componentDidMount() {
		this.props.addComponent(this.internalComponent);
		this.props.addComponent(this.props.componentId);

		if (this.props.stream) {
			this.props.setStreaming(this.props.componentId, true);
		}

		var options = (0, _helper.getQueryOptions)(this.props);
		if (this.props.sortOptions) {
			var _ref;

			options.sort = [(_ref = {}, _ref[this.props.sortOptions[0].dataField] = {
				order: this.props.sortOptions[0].sortBy
			}, _ref)];
		} else if (this.props.sortBy) {
			var _ref2;

			options.sort = [(_ref2 = {}, _ref2[this.props.dataField] = {
				order: this.props.sortBy
			}, _ref2)];
		}

		// Override sort query with defaultQuery's sort if defined
		this.defaultQuery = null;
		if (this.props.defaultQuery) {
			this.defaultQuery = this.props.defaultQuery();
			if (this.defaultQuery.sort) {
				options.sort = this.defaultQuery.sort;
			}
		}

		this.props.setQueryOptions(this.props.componentId, options);
		this.setReact(this.props);

		if (this.defaultQuery) {
			var _defaultQuery = this.defaultQuery,
			    sort = _defaultQuery.sort,
			    query = _objectWithoutProperties(_defaultQuery, ['sort']);

			this.props.updateQuery({
				componentId: this.internalComponent,
				query: query
			});
		} else {
			this.props.updateQuery({
				componentId: this.internalComponent,
				query: null
			});
		}

		if (!this.props.pagination) {
			window.addEventListener('scroll', this.scrollHandler);
		}
	};

	ResultCard.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
		if (!(0, _helper.isEqual)(this.props.sortOptions, nextProps.sortOptions) || this.props.sortBy !== nextProps.sortBy || this.props.size !== nextProps.size || !(0, _helper.isEqual)(this.props.dataField, nextProps.dataField)) {
			var options = (0, _helper.getQueryOptions)(nextProps);
			if (nextProps.sortOptions) {
				var _ref3;

				options.sort = [(_ref3 = {}, _ref3[nextProps.sortOptions[0].dataField] = {
					order: nextProps.sortOptions[0].sortBy
				}, _ref3)];
			} else if (nextProps.sortBy) {
				var _ref4;

				options.sort = [(_ref4 = {}, _ref4[nextProps.dataField] = {
					order: nextProps.sortBy
				}, _ref4)];
			}
			this.props.setQueryOptions(this.props.componentId, options);
		}

		if (nextProps.defaultQuery && !(0, _helper.isEqual)(nextProps.defaultQuery(), this.defaultQuery)) {
			var _options = (0, _helper.getQueryOptions)(nextProps);
			this.defaultQuery = nextProps.defaultQuery();

			var _defaultQuery2 = this.defaultQuery,
			    sort = _defaultQuery2.sort,
			    query = _objectWithoutProperties(_defaultQuery2, ['sort']);

			if (sort) {
				_options.sort = this.defaultQuery.sort;
				nextProps.setQueryOptions(nextProps.componentId, _options);
			}

			this.props.updateQuery({
				componentId: this.internalComponent,
				query: query
			});
		}

		if (this.props.stream !== nextProps.stream) {
			this.props.setStreaming(nextProps.componentId, nextProps.stream);
		}

		if (!(0, _helper.isEqual)(nextProps.react, this.props.react)) {
			this.setReact(nextProps);
		}

		// called when page is changed
		if (this.props.pagination && this.state.isLoading) {
			window.scrollTo(0, 0);
			this.setState({
				isLoading: false
			});
		}

		if (!nextProps.pagination && this.props.hits && nextProps.hits && (this.props.hits.length < nextProps.hits.length || nextProps.hits.length === nextProps.total)) {
			this.setState({
				isLoading: false
			});
		}

		if (!nextProps.pagination && nextProps.hits && this.props.hits && nextProps.hits.length < this.props.hits.length) {
			window.scrollTo(0, 0);
			this.setState({
				from: 0,
				isLoading: false
			});
		}

		if (nextProps.pagination && nextProps.total !== this.props.total) {
			this.setState({
				totalPages: Math.ceil(nextProps.total / nextProps.size),
				currentPage: 0
			});
		}

		if (nextProps.pagination !== this.props.pagination) {
			if (nextProps.pagination) {
				window.addEventListener('scroll', this.scrollHandler);
			} else {
				window.removeEventListener('scroll', this.scrollHandler);
			}
		}
	};

	ResultCard.prototype.componentWillUnmount = function componentWillUnmount() {
		this.props.removeComponent(this.props.componentId);
	};

	ResultCard.prototype.render = function render() {
		var _this2 = this;

		var results = (0, _helper.parseHits)(this.props.hits) || [];
		var streamResults = (0, _helper.parseHits)(this.props.streamHits) || [];
		var filteredResults = results;

		if (streamResults.length) {
			var ids = streamResults.map(function (item) {
				return item._id;
			});
			filteredResults = filteredResults.filter(function (item) {
				return !ids.includes(item._id);
			});
		}

		return _react2.default.createElement(
			'div',
			{ style: this.props.style, className: this.props.className },
			this.props.isLoading && this.props.pagination && this.props.loader && this.props.loader,
			_react2.default.createElement(
				_Flex2.default,
				{
					labelPosition: this.props.sortOptions ? 'right' : 'left',
					className: (0, _helper.getClassName)(this.props.innerClass, 'resultsInfo')
				},
				this.props.sortOptions ? this.renderSortOptions() : null,
				this.props.showResultStats ? this.renderResultStats() : null
			),
			this.props.pagination && this.props.paginationAt === 'top' ? this.renderPagination() : null,
			_react2.default.createElement(
				'div',
				{ className: _Card.container + ' ' + (0, _helper.getClassName)(this.props.innerClass, 'list') },
				[].concat(streamResults, filteredResults).map(function (item) {
					return _this2.renderAsCard(item);
				})
			),
			this.state.isLoading && !this.props.pagination ? _react2.default.createElement(
				'div',
				{ style: { textAlign: 'center', margin: '20px 0', color: '#666' } },
				'Loading...'
			) : null,
			this.props.pagination && this.props.paginationAt === 'bottom' ? this.renderPagination() : null,
			this.props.url.endsWith('appbase.io') && results.length ? _react2.default.createElement(
				_Flex2.default,
				{ direction: 'row-reverse', className: (0, _helper.getClassName)(this.props.innerClass, 'poweredBy') },
				_react2.default.createElement(_PoweredBy2.default, null)
			) : null
		);
	};

	return ResultCard;
}(_react.Component);

var _initialiseProps = function _initialiseProps() {
	var _this3 = this;

	this.setReact = function (props) {
		var react = props.react;

		if (react) {
			var newReact = (0, _helper.pushToAndClause)(react, _this3.internalComponent);
			props.watchComponent(props.componentId, newReact);
		} else {
			props.watchComponent(props.componentId, { and: _this3.internalComponent });
		}
	};

	this.scrollHandler = function () {
		if (!_this3.state.isLoading && window.innerHeight + window.scrollY + 300 >= document.body.offsetHeight) {
			_this3.loadMore();
		}
	};

	this.loadMore = function () {
		if (_this3.props.hits && !_this3.props.pagination && _this3.props.total !== _this3.props.hits.length) {
			var value = _this3.state.from + _this3.props.size;
			var options = (0, _helper.getQueryOptions)(_this3.props);

			_this3.setState({
				from: value,
				isLoading: true
			});
			_this3.props.loadMore(_this3.props.componentId, _extends({}, options, {
				from: value
			}), true);
		} else if (_this3.state.isLoading) {
			_this3.setState({
				isLoading: false
			});
		}
	};

	this.setPage = function (page) {
		var value = _this3.props.size * page;
		var options = (0, _helper.getQueryOptions)(_this3.props);
		_this3.setState({
			from: value,
			isLoading: true,
			currentPage: page
		});
		_this3.props.loadMore(_this3.props.componentId, _extends({}, options, {
			from: value
		}), false);
	};

	this.prevPage = function () {
		if (_this3.state.currentPage) {
			_this3.setPage(_this3.state.currentPage - 1);
		}
	};

	this.nextPage = function () {
		if (_this3.state.currentPage < _this3.state.totalPages - 1) {
			_this3.setPage(_this3.state.currentPage + 1);
		}
	};

	this.getStart = function () {
		var midValue = parseInt(_this3.props.pages / 2, 10);
		var start = _this3.state.currentPage - midValue;
		return start > 1 ? start : 2;
	};

	this.renderPagination = function () {
		var start = _this3.getStart();
		var pages = [];

		if (start <= _this3.state.totalPages) {
			var totalPagesToShow = _this3.props.pages < _this3.state.totalPages ? start + _this3.props.pages - 1 : _this3.state.totalPages + 1;

			var _loop = function _loop(i) {
				var pageBtn = _react2.default.createElement(
					_Button2.default,
					{
						className: (0, _helper.getClassName)(_this3.props.innerClass, 'button') || null,
						primary: _this3.state.currentPage === i - 1,
						key: i - 1,
						onClick: function onClick() {
							return _this3.setPage(i - 1);
						}
					},
					i
				);
				if (i <= _this3.state.totalPages + 1) {
					pages.push(pageBtn);
				}
			};

			for (var i = start; i < totalPagesToShow; i += 1) {
				_loop(i);
			}
		}

		if (!_this3.state.totalPages) {
			return null;
		}

		return _react2.default.createElement(
			'div',
			{ className: _Button.pagination + ' ' + (0, _helper.getClassName)(_this3.props.innerClass, 'pagination') },
			_react2.default.createElement(
				_Button2.default,
				{
					className: (0, _helper.getClassName)(_this3.props.innerClass, 'button') || null,
					disabled: _this3.state.currentPage === 0,
					onClick: _this3.prevPage
				},
				'Prev'
			),
			_react2.default.createElement(
				_Button2.default,
				{
					className: (0, _helper.getClassName)(_this3.props.innerClass, 'button') || null,
					primary: _this3.state.currentPage === 0,
					onClick: function onClick() {
						return _this3.setPage(0);
					}
				},
				'1'
			),
			pages,
			_react2.default.createElement(
				_Button2.default,
				{
					className: (0, _helper.getClassName)(_this3.props.innerClass, 'button') || null,
					disabled: _this3.state.currentPage >= _this3.state.totalPages - 1,
					onClick: _this3.nextPage
				},
				'Next'
			)
		);
	};

	this.renderAsCard = function (item) {
		var result = _this3.props.onData(item);

		if (result) {
			return _react2.default.createElement(
				_Card2.default,
				{
					key: item._id,
					href: result.url,
					className: (0, _helper.getClassName)(_this3.props.innerClass, 'listItem'),
					target: _this3.props.target,
					rel: _this3.props.target === '_blank' ? 'noopener noreferrer' : null
				},
				_react2.default.createElement(_Card.Image, {
					style: { backgroundImage: 'url(' + result.image + ')' },
					className: (0, _helper.getClassName)(_this3.props.innerClass, 'image')
				}),
				typeof result.title === 'string' ? _react2.default.createElement(_Title2.default, {
					dangerouslySetInnerHTML: { __html: result.title },
					className: (0, _helper.getClassName)(_this3.props.innerClass, 'title')
				}) : _react2.default.createElement(
					_Title2.default,
					{ className: (0, _helper.getClassName)(_this3.props.innerClass, 'title') },
					result.title
				),
				typeof result.description === 'string' ? _react2.default.createElement('article', { dangerouslySetInnerHTML: { __html: result.description } }) : _react2.default.createElement(
					'article',
					null,
					result.description
				)
			);
		}

		return null;
	};

	this.renderResultStats = function () {
		if (_this3.props.onResultStats && _this3.props.total) {
			return _this3.props.onResultStats(_this3.props.total, _this3.props.time);
		} else if (_this3.props.total) {
			return _react2.default.createElement(
				'p',
				{ className: _results.resultStats + ' ' + (0, _helper.getClassName)(_this3.props.innerClass, 'resultStats') },
				_this3.props.total,
				' results found in ',
				_this3.props.time,
				'ms'
			);
		}
		return null;
	};

	this.handleSortChange = function (e) {
		var _ref5;

		var index = e.target.value;
		var options = (0, _helper.getQueryOptions)(_this3.props);

		options.sort = [(_ref5 = {}, _ref5[_this3.props.sortOptions[index].dataField] = {
			order: _this3.props.sortOptions[index].sortBy
		}, _ref5)];
		_this3.props.setQueryOptions(_this3.props.componentId, options);
	};

	this.renderSortOptions = function () {
		return _react2.default.createElement(
			'select',
			{
				className: _results.sortOptions + ' ' + (0, _helper.getClassName)(_this3.props.innerClass, 'sortOptions'),
				name: 'sort-options',
				onChange: _this3.handleSortChange
			},
			_this3.props.sortOptions.map(function (sort, index) {
				return _react2.default.createElement(
					'option',
					{ key: sort.label, value: index },
					sort.label
				);
			})
		);
	};
};

ResultCard.propTypes = {
	addComponent: _types2.default.funcRequired,
	componentId: _types2.default.stringRequired,
	sortBy: _types2.default.sortBy,
	sortOptions: _types2.default.sortOptions,
	dataField: _types2.default.stringRequired,
	setQueryOptions: _types2.default.funcRequired,
	defaultQuery: _types2.default.func,
	updateQuery: _types2.default.funcRequired,
	size: _types2.default.number,
	react: _types2.default.react,
	pagination: _types2.default.bool,
	paginationAt: _types2.default.paginationAt,
	hits: _types2.default.hits,
	setStreaming: _types2.default.func,
	stream: _types2.default.bool,
	streamHits: _types2.default.hits,
	total: _types2.default.number,
	removeComponent: _types2.default.funcRequired,
	loadMore: _types2.default.funcRequired,
	pages: _types2.default.number,
	onData: _types2.default.func,
	time: _types2.default.number,
	showResultStats: _types2.default.bool,
	onResultStats: _types2.default.func,
	loader: _types2.default.title,
	isLoading: _types2.default.bool,
	style: _types2.default.style,
	className: _types2.default.string,
	innerClass: _types2.default.style,
	url: _types2.default.string,
	target: _types2.default.stringRequired
};

ResultCard.defaultProps = {
	pagination: false,
	paginationAt: 'bottom',
	pages: 5,
	size: 10,
	showResultStats: true,
	style: {},
	className: null,
	target: '_blank'
};

var mapStateToProps = function mapStateToProps(state, props) {
	return {
		hits: state.hits[props.componentId] && state.hits[props.componentId].hits,
		streamHits: state.streamHits[props.componentId] || [],
		total: state.hits[props.componentId] && state.hits[props.componentId].total,
		time: state.hits[props.componentId] && state.hits[props.componentId].time || 0,
		isLoading: state.isLoading[props.componentId] || false,
		url: state.config.url
	};
};

var mapDispatchtoProps = function mapDispatchtoProps(dispatch) {
	return {
		addComponent: function addComponent(component) {
			return dispatch((0, _actions.addComponent)(component));
		},
		removeComponent: function removeComponent(component) {
			return dispatch((0, _actions.removeComponent)(component));
		},
		setStreaming: function setStreaming(component, stream) {
			return dispatch((0, _actions.setStreaming)(component, stream));
		},
		watchComponent: function watchComponent(component, react) {
			return dispatch((0, _actions.watchComponent)(component, react));
		},
		setQueryOptions: function setQueryOptions(component, props) {
			return dispatch((0, _actions.setQueryOptions)(component, props));
		},
		updateQuery: function updateQuery(updateQueryObject) {
			return dispatch((0, _actions.updateQuery)(updateQueryObject));
		},
		loadMore: function loadMore(component, options, append) {
			return dispatch((0, _actions.loadMore)(component, options, append));
		}
	};
};

exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchtoProps)(ResultCard);